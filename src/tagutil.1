.\"
.\" Copyright (c) 2008-2013
.\"    Alexandre Perrin <alex@kaworu.ch>.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
.\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
.\" LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.\" ---------------------------------------------------------------------------
.\" --- tagutil man page cheat sheet.
.\"
.\" .Sh → Section (rarely used)
.\" .Pp → "paragraph" or line break
.\"
.\" .Nm → the program's name (tagutil) (often used)
.\" .Sq → quoted text like `foo`
.\" .Xr ls 1 → command like ls(1)
.\" .Ev → environnment variable (rarely used)
.\" .Pa → source file ? (rarely used)
.\" .Dv → constant ? (rarely used)
.\" .Er → error code (rarely used)
.\" .Dl → cli invocation ? (in examples)
.\"
.\" .Op Fl x      → Optional command line stuff like `[-x]'
.\" .Fl f Ar file → Flag with argument like `-f file'.
.\" .Bl
.\" .It Fl x
.\" desc
.\" .El        → Bl is kind of a list, It will left align stuff in followings
.\"              .It (usually option or arguments) and desc will be right
.\"              aligned.
.\" ---------------------------------------------------------------------------
.Dd December 16, 2013
.Dt TAGUTIL 1
.Os
.Sh NAME
.Nm tagutil
.Nd edit and display music files tags
.Sh SYNOPSIS
.Nm
.Op Fl hpYN
.Op Fl F Ar format
.Op Ar action ...
.Ar
.Sh DESCRIPTION
.Nm
displays and modify tags stored in musics files.
.Nm
can support most music files format (including FLAC, ogg/vorbis and mp3) and
multiple output formats including YAML (the default) to be both human and
script friendly.
.Sh OPTIONS
.Pp
.Bl -tag -width indent
.It Fl h
Show
.Nm
help displaying the version,
.Sx OPTIONS ,
.Sx ACTIONS ,
output
.Sx FORMATS ,
and
.Sx BACKENDS .
.It Fl p
Create intermediate directories as required on rename. Useful
when the rename
.Ar pattern
expand to a path in a directory that does not exist. It is ignored when there is no
.Dq rename
action. This option is inspired by the
.Fl p
option from
.Xr mdkir 1 .
.It Fl Y
answer
.Dq yes
to all questions.
.It Fl N
answer
.Dq no
to all questions.
.It Fl F Ar format
Use
.Ar format
for tags output and parsing. The list of supported values for
.Ar format
can be seen by invoking
.Nm Fl h .
see also the
.Sx FORMATS
section.
.El
.Sh ACTIONS
.Pp
Each given actions are executed in order for each
.Ar file .
If no actions are given,
.Ic print
will be executed.
.Bl -tag -width indent
.It print
Display the list of tags (default).
See also
.Sx FORMATS .
.It backend
Display the backend used.
See also
.Sx BACKENDS .
.It clear:TAGNAME
Erase all
.Sx TAGNAME .
if
.Sx TAGNAME
is empty, all tags are erased.
.It add:TAGNAME=value
Add a new tag at the end of the tag list.
.It set:TAGNAME=value
Replace the first instance of
.Sx TAGNAME
and clear the following. Equivalent to
.Ic add:TAGNAME=value
if there is no
.Sx TAGNAME
in the tag list.
.It edit
Execute
.Ev EDITOR
to prompt for tag editing in a temporary file, and then
.Ic load
the temporary file. The
.Ic load
action is cancelled if the editing process exited with a non-zero status code
or if the temporary file was left unmodified.
.It load:fmtfile
Parse the given file at
.Ar fmtfile
and load the tags into the music file.
.Ar fmtfile
has to honor the given
.Ar format
(or the default) in order to be successfully parsed.
If
.Ar fmtfile
is empty or
.Dq - ,
the standard input
is used.
.It rename:pattern
rename files expanding given
.Ar pattern .
The
.Ar pattern
can contain
.Sx TAGNAME
keywords expanded with their value. To avoid accidental rename,
confirmation is asked before rename (see
.Fl Y
and
.Fl N
options).
.Pp
The pattern use \%% for
.Sx TAGNAME
expansion. A litteral \%% can be escaped with a backslash: \\\%%
.Bl -tag -width indent
.It \%%key
Is replaced by the value of the first
.Dq key
tag found in the tag list. This syntax is used when
.Dq key
does contains only alphanumeric character(s).
.It \%%{key}
Is replaced by the value of the first
.Dq key
tag found in the tag list. Any character can be enclosed into the delimiting braces (to enclose the
.Dq }
character, escape it with a backslash).
.El
.Pp
NOTE: if the
.Ar pattern
(or a tag expanded) contains a
.Dq /
character,
.Nm
will check the destination directory. If the destination directory exists,
.Nm
will rename the
.Ar file
and its parent directoy will change. If the destination directory does not exist and
.Fl p
was given,
.Nm
will try to create the intermediate directories before the rename. If the destination directory does not exist and
.Fl p
was not given,
.Nm
will display an error message and exit.
.El
.Sh BACKENDS
.Nm
is designed in a modular way, making it very easy to add support for any file
format. While this section describe each music file format supported, the
complete list supported by the installed version should be checked with
.Nm Fl h .
.Bl -tag -width indent
.It libFLAC
Free Lossless Audio Codec (FLAC) files format (https://xiph.org/flac/). The
FLAC format use Vorbis Comment to store tags. This means that, like Ogg/Vorbis,
FLAC supports an ordered, unlimited set of tags allowing duplicate keys.
.It libvorbis
Ogg/Vorbis files format (http://www.vorbis.com/). Ogg/Vorbis use Vorbis Comment
to store tags and supports an ordered, unlimited set of tags allowing duplicate
keys.
.It TagLib
TagLib is a library for reading and editing the meta-data of several popular
audio formats (http://taglib.github.io/). This backend only support a limited
set of tags :
.Dq title ,
.Dq artist ,
.Dq album ,
.Dq comment ,
.Dq genre ,
.Dq year
and
.Dq track .
.It ID3V1
A simple ID3v1.1 backend (built-in). ID3v1.0 and ID3v1.1 are only used by old
mp3 files and has been superseded by ID3v2 more than ten years ago. It
simplicity makes it a good example for backend implementation and it is
disabled by default.
.El
.Sh OUTPUT FORMATS
.Nm
is designed in a modular way, making it very easy to add support for any output
format. While this section describe each format implemented, the complete list
supported by the installed version should be checked with
.Nm Fl h .
.Bl -tag -width indent
.It yml
YAML is the default format because it is both human friendly for
.Ic edit
and
.Ic print
and have good support in popular scripting languages. It is implemented using
libyaml (http://pyyaml.org/wiki/LibYAML), which can produce very detailed error
messages (useful to debug scripts).
.It json
JSON is intended to be used for scripting as an alternative to YAML.
.El
.Sh ENVIRONMENT
The
.Ev LC_ALL, EDITOR
and
.Ev TMPDIR
environment variables affect the execution of
.Nm .
.Bl -tag -width indent
.It Ev LC_ALL
Note that both standard YAML and JSON require UTF-8 and so will
.Nm
when using one of these format. Command line actions like
.Dq add
will honor
.Ev LC_ALL
by encoding the
.Sx TAGNAME
and
.Dq value
action arguments in UTF-8 if needed.
.It Ev EDITOR
required when the
.Ic edit
action is invoked.
.It Ev TMPDIR
used to store the temporary file used by the
.Ic edit
action.
.El
.Sh EXIT STATUS
.Ex -std
.Sh EXAMPLES
Print the tags of file.flac:
.Dl % tagutil file.flac
.Pp
Set the title "foo" to file.ogg:
.Dl % tagutil set:title=foo file.ogg
.Pp
Interactivly edit the file.flac's tags:
.Dl % tagutil edit file.flac
.Pp
Rename file.flac using its artist, album, tracknumber and title tags:
.Dl % tagutil rename:"%artist - %album - [%tracknumber] - %title" file.flac
.Pp
Clear all tags and then add an artist and album tag.
.Dl % tagutil clear: add:artist="Pink Floyd" add:album="Meddle" *.flac
.Pp
Switch all tag keys
.Dq track
to
.Dq trackname
.Dl % tagutil file.flac | sed -e 's/^- track:/- tracknumber:/' | tagutil load: file.flac
.Pp
A Ruby script that trim every tag values:
.Bd -literal -offset indent
#!/usr/bin/env ruby

require 'yaml'
require 'open3'

ARGV.each do |arg|

  Open3.popen3('tagutil', arg) do |_, pstdout, pstderr|
    $s = pstdout.read
    $e = pstderr.read
  end
  yaml = YAML.load($s)

  if not yaml
    STDERR.puts($e)
  else
    stripped = Array.new
    yaml.each do |hash|
      hash.each do |key, val|
        newval = if val.respond_to?(:strip) then val.to_s.strip else val end
        stripped << { key => newval }
      end
    end

    Open3.popen3('tagutil', 'load:-', arg) do |pstdin, pstdout, pstderr|
      pstdin << stripped.to_yaml
      pstdin.close
      STDERR.puts($e) unless ($e = pstderr.read).strip.empty?
    end
  end
end
.Ed
.Sh AUTHORS
.An "Alexandre Perrin" Aq alex@kaworu.ch
.An "Baptiste Daroussin" Aq bapt@FreeBSD.org
.Sh BUGS
.Pp
All current implemented output format will force UTF-8 for both output and parsing.
.Pp
When the TagLib backend is used with mp3 files it will interprete integer
values for the
.Dq genre
tag as index for the ID3 Tag Genre ID (extended) list. Although this is
intended as a feature, it make the interface inconsistant with other backends.
