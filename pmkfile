# globals settings
SETTINGS {
    TARGET  = ("Makefile.in", "t_config.h.in")
    LANG    = "C"
}

# devel or release?
SWITCHES {
    devel = FALSE
}

# constants
DEFINE {
    PACKAGE = "tagutil"
	BINDIR  = "bin"
	MANDIR  = "man"
	MAN1DIR = "\\${MANDIR}/man1"
    VERSION = "2.0_rc1"
    AUTHORS = "kAworu"
}

# set CFLAGS.
IF(devel) {
    DEFINE {
        CFLAGS = "-std=c99 -g -Wall"
        CFLAGSMOD = "="
    }
}
ELSE(devel) {
    DEFINE {
        CFLAGS = "-std=c99"
        CFLAGSMOD = "+="
    }
}

CHECK_BINARY(bin_make) {
    NAME = "make"
}
CHECK_BINARY(bin_rm) {
    NAME = "rm"
    VARIABLE = "RM"
}
CHECK_BINARY(bin_gzip) {
# needed to compress manual page
    NAME = "gzip"
    VARIABLE = "GZIP"
}


# C types

# We require C99
CHECK_TYPE(c_type_bool) {
	NAME = "bool"
    HEADER = "stdbool.h"
}

# C headers

CHECK_HEADER(c_header_assert_h) {
    NAME = "assert.h"
}
CHECK_HEADER(c_header_err_h) {
    NAME = "err.h"
}
CHECK_HEADER(c_header_errno_h) {
    NAME = "errno.h"
}
CHECK_HEADER(c_header_libgen_h) {
    NAME = "libgen.h"
    FUNCTION = ("dirname")
}
CHECK_HEADER(c_header_regex_h) {
    NAME = "regex.h"
}
CHECK_HEADER(c_header_stdio_h) {
    NAME = "stdio.h"
}
CHECK_HEADER(c_header_stdlib_h) {
    NAME = "stdlib.h"
}
CHECK_HEADER(c_header_string_h) {
    NAME = "string.h"
}
CHECK_HEADER(c_header_strings_h) {
    NAME = "strings.h"
}
CHECK_HEADER(c_header_sys_types_h) {
    NAME = "sys/types.h"
}
CHECK_HEADER(c_header_sys_stat_h) {
    NAME = "sys/stat.h"
}
CHECK_HEADER(c_header_unistd_h) {
    NAME = "unistd.h"
}

# pkg-config

CHECK_PKG_CONFIG(taglib_c_pc) {
    NAME = "taglib_c"
    VERSION = "1.5"
}

# Optional stuff

# FreeBSD and OpenBSD define a sane dirname function:
#   char *dirname(const char *)
# while POSIX does only require
#   char *dirname(char *)
# since we think that the first one is far more superior, we try to use it when
# available.
CHECK_VARIABLE(os_freebsd) {
    REQUIRED = FALSE
    NAME = "OS_NAME"
    VALUE = "FreeBSD"
    DEFS = ("SANE_DIRNAME")
}
IF(!os_freebsd) {
    CHECK_VARIABLE(os_openbsd) {
        REQUIRED = FALSE
        NAME = "OS_NAME"
        VALUE = "OpenBSD"
        DEFS = ("SANE_DIRNAME")
    }
}

# We need getprogname(3). If not available, we define a getprogname(3) function
# that use the char *__progname globale variable.
CHECK_HEADER(c_function_getprogname) {
    NAME = "stdlib.h"
    REQUIRED = FALSE
    FUNCTION = ("getprogname")
}

# we need getopt(3). glibc define getopt(3) in its own header <getopt.h>
# (included in <unistd.h>) while *BSD define it in <unistd.h>. PreMakeKit is
# not smart enough to detect included headers (it should), so we detect it by
# hand
CHECK_HEADER(c_function_getopt) {
    REQUIRED = FALSE
    NAME = "unistd.h"
    FUNCTION = ("getopt")
}

IF(!c_function_getopt) {
    CHECK_HEADER(c_header_getopt_h) {
        NAME = "getopt.h"
        FUNCTION = ("getopt")
    }
}

# glibc __nonnull(x) macro declaration is not compatible with the FreeBSD's.
# tagutil's __t__nonnull(x) macro act as the FreeBSD's __nonnull(x) macros.
# Then even if the __nonnull(x) macros is defined, we need to check if we are
# under a glibc based system. The only way to do it now with PreMakeKit is to
# check if we're running on GNU/Linux.
CHECK_VARIABLE(os_linux) {
    REQUIRED = FALSE
    NAME = "OS_NAME"
    VALUE = "Linux"
}
CHECK_HEADER(c_macro___nonnull) {
    NAME = "sys/cdefs.h"
    REQUIRED = FALSE
    DEPEND = ("!os_linux")
    MACRO = ("__nonnull")
}

CHECK_HEADER(c_macro___unused) {
    NAME = "sys/cdefs.h"
    REQUIRED = FALSE
    MACRO = ("__unused")
}

CHECK_HEADER(c_macro___dead2) {
    NAME = "sys/cdefs.h"
    REQUIRED = FALSE
    MACRO = ("__dead2")
}

